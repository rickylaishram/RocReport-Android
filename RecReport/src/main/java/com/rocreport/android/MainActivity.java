package com.rocreport.android;import android.app.Activity;import android.app.ActionBar;import android.app.Dialog;import android.app.Fragment;import android.app.FragmentManager;import android.app.ListActivity;import android.app.ProgressDialog;import android.content.Context;import android.content.Intent;import android.content.IntentSender;import android.content.SharedPreferences;import android.location.Location;import android.os.Build;import android.os.Bundle;import android.support.v4.widget.SwipeRefreshLayout;import android.util.Log;import android.view.Gravity;import android.view.LayoutInflater;import android.view.Menu;import android.view.MenuItem;import android.view.View;import android.view.ViewGroup;import android.support.v4.widget.DrawerLayout;import android.widget.AdapterView;import android.widget.ArrayAdapter;import android.widget.Button;import android.widget.ImageButton;import android.widget.ListView;import android.widget.TextView;import android.widget.Toast;import com.google.android.gms.common.ConnectionResult;import com.google.android.gms.common.GooglePlayServicesClient;import com.google.android.gms.common.GooglePlayServicesUtil;import com.google.android.gms.location.LocationClient;import com.loopj.android.http.AsyncHttpClient;import com.loopj.android.http.AsyncHttpResponseHandler;import com.loopj.android.http.RequestParams;import com.rocreport.android.data.MainData;import org.apache.http.Header;import org.json.JSONArray;import org.json.JSONObject;import java.util.Vector;import static com.rocreport.utils.utils.Constants.API_ENDPOINT;import static com.rocreport.utils.utils.Constants.API_REPORT_NEARBY;import static com.rocreport.utils.utils.Constants.CLIENT_ID;import static com.rocreport.utils.utils.Constants.SP_AUTH;import static com.rocreport.utils.utils.Constants.SP_AUTH_TOKEN;public class MainActivity extends Activity    implements GooglePlayServicesClient.ConnectionCallbacks,        GooglePlayServicesClient.OnConnectionFailedListener {    private Vector<MainData> data = new Vector<MainData>();    private Context CTX;    private MainAdapter ADAPTER;    private ListView list;    private ImageButton report;    private SwipeRefreshLayout refresh;    private final static int CONNECTION_FAILURE_RESOLUTION_REQUEST = 9000;    private LocationClient mLocationClient;    private Location mCurrentLocation;    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_main);        CTX = this;        getActionBar().setBackgroundDrawable(getResources().getDrawable(android.R.color.holo_blue_dark));        mLocationClient = new LocationClient(this, this, this);        setUI();    }    private void refreshData() {        data.removeAllElements();        fetchData(0, "score", mCurrentLocation, 100);    }    private void setUI(){        ADAPTER = new MainAdapter(this,R.layout.adapter_main, data);        list = (ListView) findViewById(R.id.list);        report = (ImageButton) findViewById(R.id.report);        refresh = (SwipeRefreshLayout) findViewById(R.id.swipe_container);        refresh.setColorScheme(android.R.color.holo_blue_bright, android.R.color.holo_green_light,                android.R.color.holo_orange_light, android.R.color.holo_red_light);        list.setAdapter(ADAPTER);        report.setOnClickListener(reportHandler);        list.setOnItemClickListener(itemHandler);        refresh.setOnRefreshListener(refreshHandler);    }    private SwipeRefreshLayout.OnRefreshListener refreshHandler = new SwipeRefreshLayout.OnRefreshListener() {        @Override        public void onRefresh() {            refreshData();        }    };    private View.OnClickListener reportHandler = new View.OnClickListener() {        @Override        public void onClick(View v) {            Intent mIntent = new Intent(MainActivity.this, ReportActivity.class);            startActivity(mIntent);            overridePendingTransition(R.anim.slide_right_in,R.anim.slide_right_out);        }    };    private AdapterView.OnItemClickListener itemHandler = new AdapterView.OnItemClickListener() {        @Override        public void onItemClick(AdapterView<?> parent, View view, int position, long id) {            MainData d = data.get(position);            Bundle bundle = new Bundle();            bundle.putString("category", d.category);            bundle.putString("picture", d.picture);            bundle.putString("id", d.id);            bundle.putString("longitude", d.longitude);            bundle.putString("latitude", d.latitude);            bundle.putString("loc_name", d.loc_name);            bundle.putString("email", d.email);            bundle.putString("created", d.created);            bundle.putString("details", d.details);            bundle.putString("score", d.score);            bundle.putString("vote_count", d.vote_count);            bundle.putString("inform_count", d.inform_count);            bundle.putBoolean("has_votes", d.has_voted);            bundle.putBoolean("in_inform", d.in_inform);            Intent mIntent = new Intent(MainActivity.this, DetailsActivity.class);            mIntent.putExtras(bundle);            startActivity(mIntent);            overridePendingTransition(R.anim.slide_right_in,R.anim.slide_right_out);        }    };    @Override    public void onConnected(Bundle dataBundle) {        mCurrentLocation = mLocationClient.getLastLocation();        refreshData();    }    @Override    public void onDisconnected() {        Toast.makeText(this, "Disconnected. Please re-connect.",                Toast.LENGTH_SHORT).show();    }    @Override    public void onConnectionFailed(ConnectionResult connectionResult) {        if (connectionResult.hasResolution()) {            try {                // Start an Activity that tries to resolve the error                connectionResult.startResolutionForResult(                        this,                        CONNECTION_FAILURE_RESOLUTION_REQUEST);            } catch (IntentSender.SendIntentException e) {                e.printStackTrace();            }        } else {            Toast.makeText(CTX, "Something went wrong!", Toast.LENGTH_LONG).show();        }    }    @Override    protected void onStart() {        super.onStart();        mLocationClient.connect();    }    @Override    protected void onStop() {        mLocationClient.disconnect();        super.onStop();    }    @Override    public boolean onCreateOptionsMenu(Menu menu) {        return true;    }    @Override    public boolean onOptionsItemSelected(MenuItem item) {        return super.onOptionsItemSelected(item);    }    /*    Fetches the reports from the server    radius is in km     */    private void fetchData(int page, String orderby , Location location, int radius) {        int limit = 100; // Set appropriate limit later with pagination        int offset = page*limit;        SharedPreferences sp = CTX.getSharedPreferences(SP_AUTH, MODE_PRIVATE);        String token = sp.getString(SP_AUTH_TOKEN, null);        RequestParams params = new RequestParams();        params.put("id", CLIENT_ID);        params.put("token", token);        params.put("limit", limit+"");        params.put("offset", offset+"");        params.put("latitude", location.getLatitude()+"");        params.put("longitude", location.getLongitude()+"");        params.put("radius",radius*1000+"");        params.put("orderby", orderby);        AsyncHttpClient client = new AsyncHttpClient();        client.post(API_ENDPOINT+API_REPORT_NEARBY, params, new AsyncHttpResponseHandler(){            ProgressDialog pDialog = new ProgressDialog(CTX);            @Override            public void onStart() {                //pDialog.setMessage("Getting data. Please wait ...");                //pDialog.show();                refresh.setRefreshing(true);            }            @Override            public void onSuccess(int statusCode, Header[] headers, byte[] responseBody){                try {                    JSONObject response = new JSONObject(new String(responseBody));                    Boolean status = (response.getString("status")).equals("true");                    JSONArray repdata = response.getJSONArray("data");                    if (status) {                        for (int i = 0; i < repdata.length(); i++) {                            JSONObject report = repdata.getJSONObject(i);                            MainData d = new MainData();                            d.setData(                                    report.getString("category"),                                    report.getString("picture"),                                    report.getString("report_id"),                                    report.getString("latitude"),                                    report.getString("longitude"),                                    report.getString("formatted_address"),                                    report.getString("email"),                                    report.getString("added_at"),                                    report.getString("description"),                                    report.getJSONArray("update"),                                    report.getString("score"),                                    report.getString("inform_count"),                                    report.getString("vote_count"),                                    report.getString("hasVotes").equals("true"),                                    report.getString("inInform").equals("true")                            );                            data.add(d);                        }                        ADAPTER.notifyDataSetChanged();                    } else {                        Toast.makeText(CTX, "Error", Toast.LENGTH_LONG).show();                    }                } catch (Exception e) {                    Log.e("Error", e.toString());                }                refresh.setRefreshing(false);                //pDialog.dismiss();            }            @Override            public void onFailure(int statusCode, Header[] headers, byte[] responseBody, Throwable error){                //tv_status.setText("Something went wrong :(");                //String resp = new String(responseBody);                //Log.v("Fetch reports", resp);                refresh.setRefreshing(false);                //pDialog.dismiss();            }        });    }}